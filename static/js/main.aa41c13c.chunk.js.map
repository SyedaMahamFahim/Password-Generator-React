{"version":3,"sources":["PasswordGenerator.jsx","message.jsx","Characters.jsx","App.js","reportWebVitals.js","index.js"],"names":["PasswordGenerator","useState","password","setPassword","passwordLength","setPasswordLength","uppercaseLetters","setUppercaseLetters","lowercaseLetters","setlowercaseLetters","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","createPassword","characterList","characterListLength","length","i","characterIndex","Math","round","random","charAt","notify","message","hasError","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","className","onClick","e","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","htmlFor","target","value","defaultValue","type","id","name","max","min","checked","newestOnTop","rtl","pauseOnFocusLoss","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aa41c13c.chunk.js","sourcesContent":["\r\nimport React,{useState} from 'react'\r\nimport './App.css'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\n\r\nimport {\r\n    numbers,\r\n    upperCaseLetters,\r\n    lowerCaseLetters,\r\n    specialCharacters,\r\n  } from './Characters'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { COPY_SUCCESS } from './message'\r\nfunction PasswordGenerator() {\r\n  const [password, setPassword] = useState('')\r\n  const [passwordLength, setPasswordLength] = useState(20)\r\n  const [uppercaseLetters,setUppercaseLetters]=useState(false)\r\n  const [lowercaseLetters,setlowercaseLetters]=useState(false)\r\n  const [includeNumbers,setIncludeNumbers]=useState(false)\r\n  const [includeSymbols,setIncludeSymbols]=useState(false)\r\n \r\n  \r\n   \r\n  const handleGeneratePassword=(e)=>{\r\n    if (\r\n        !lowercaseLetters &&\r\n        !uppercaseLetters &&\r\n        !includeNumbers &&\r\n        !includeSymbols\r\n      ) {\r\n        notify('You must Select atleast one option', true)\r\n      }\r\n    let characterList = ''\r\n    if (lowercaseLetters) {\r\n        characterList = characterList + lowerCaseLetters\r\n      }\r\n    \r\n      if (uppercaseLetters) {\r\n        characterList = characterList + upperCaseLetters\r\n      }\r\n    \r\n      if (includeNumbers) {\r\n        characterList = characterList + numbers\r\n      }\r\n    \r\n      if (includeSymbols) {\r\n        characterList = characterList + specialCharacters\r\n      }\r\n      setPassword(createPassword(characterList))\r\n  }\r\n  const createPassword = (characterList) => {\r\n    let password = ''\r\n    const characterListLength = characterList.length\r\n\r\n    for (let i = 0; i < passwordLength; i++) {\r\n      const characterIndex = Math.round(Math.random() * characterListLength)\r\n      password = password + characterList.charAt(characterIndex)\r\n\r\n    }\r\n    return password\r\n  }\r\n  const copyToClipboard = () => {\r\n    const newTextArea = document.createElement('textarea')\r\n    newTextArea.innerText = password\r\n    document.body.appendChild(newTextArea)\r\n    newTextArea.select()\r\n    document.execCommand('copy')\r\n    newTextArea.remove()\r\n  }\r\n\r\n  const notify = (message, hasError = false) => {\r\n    if (hasError) {\r\n      toast.error(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    } else {\r\n      toast(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCopyPassword = (e) => {\r\n    if (password === '') {\r\n      notify('Nothing To Copy', true)\r\n    } else {\r\n      copyToClipboard()\r\n      notify(COPY_SUCCESS)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <div className='generator'>\r\n          <h2 className='generator__header'>Password Generator</h2>\r\n          <div className='generator__password'>\r\n            <h3>{password}</h3>\r\n            <button onClick={handleCopyPassword}  className='copy__btn'>\r\n              <i className='far fa-clipboard'></i>\r\n            </button>\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <label htmlFor='password-strength'>Password length</label>\r\n            <input\r\n              onClick={(e)=>setPasswordLength(e.target.value)}\r\n              defaultValue={passwordLength}\r\n              type='number'\r\n              id='password-strength'\r\n              name='password-strength'\r\n              max='20'\r\n              min='10'\r\n            />\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <label htmlFor='uppercase-letters'>Include Uppercase Letters</label>\r\n            <input\r\n              onClick={(e)=>setUppercaseLetters(e.target.checked)}\r\n              defaultValue={uppercaseLetters}\r\n              type='checkbox'\r\n              id='uppercase-letters'\r\n              name='uppercase-letters'\r\n            />\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <label htmlFor='lowercase-letters'>Include Lowercase Letters</label>\r\n            <input\r\n            onClick={(e)=>setlowercaseLetters(e.target.checked)}\r\n              defaultValue={lowercaseLetters}\r\n              type='checkbox'\r\n              id='lowercase-letters'\r\n              name='lowercase-letters'\r\n            />\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <label htmlFor='include-numbers'>Include Numbers</label>\r\n            <input\r\n            onClick={(e)=>setIncludeNumbers(e.target.checked)}\r\n               defaultValue={includeNumbers}\r\n              type='checkbox'\r\n              id='include-numbers'\r\n              name='include-numbers'\r\n            />\r\n          </div>\r\n\r\n          <div className='form-group'>\r\n            <label htmlFor='include-symbols'>Include Symbols</label>\r\n            <input\r\n            onClick={(e)=>setIncludeSymbols(e.target.checked)}\r\n               defaultValue={includeSymbols}\r\n              type='checkbox'\r\n              id='include-symbols'\r\n              name='include-symbols'\r\n            />\r\n          </div>\r\n\r\n          <button className='generator__btn' onClick={handleGeneratePassword}>\r\n            Generate Password\r\n          </button>\r\n         \r\n        </div>\r\n      </div>\r\n    </div>\r\n    <ToastContainer\r\n            position='top-center'\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PasswordGenerator;\r\n","export const COPY_SUCCESS = 'Password successfully copied to clipboard'\r\n","export const numbers = '0123456789'\r\nexport const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nexport const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\r\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","\r\nimport React from 'react'\r\nimport PasswordGenerator from './PasswordGenerator'\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <PasswordGenerator/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}